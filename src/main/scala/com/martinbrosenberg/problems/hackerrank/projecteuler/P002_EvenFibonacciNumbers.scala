package com.martinbrosenberg.problems.hackerrank.projecteuler

/** Project Euler #2: Even Fibonacci numbers
  *
  * Each new term in the Fibonacci sequence is generated by adding the previous
  * two terms. Starting with 0 and 1, the first 10 terms will be:
  *
  * 0, 1, 1, 2, 3, 5, 8, 13, 21, 34
  *
  * By considering the terms in the Fibonacci sequence whose values do not
  * exceed N, find the sum of the even-valued terms.
  *
  * @see [[https://www.hackerrank.com/contests/projecteuler/challenges/euler002]]
  */
object P002_EvenFibonacciNumbers {

  /** @author Luigi Plinge
    * @see [[http://www.luigip.com/?p=200]]
    */
  val fibs: Stream[Long] = 0 #:: fibs.scanLeft(1L)(_ + _)

  /** Constraints: None.
    *
    * Obvious O(n) solution, using a cleverly-constructed Stream.
    */
  def sum_1(max: Long): Long =
    fibs
      .takeWhile(_ < max)
      .filter(_ % 2 == 0)
      .sum

  /** Same strategy as fibs, above, but only generates the even Fibonacci
    * numbers. These are every third Fibonacci number, and the next number is
    * the sum of 4 * F_n-1 and F_n-2. The first ten terms are:
    *
    * 0, 2, 8, 34, 144, 610, 2584, 10946, 46368, 196418, 832040
    */
  val evenFibs: Stream[Long] = 0 #:: evenFibs.scanLeft(2L)(4 * _ + _)

  /** Constraints: Only calculate the even numbers.
    *
    * Solution is still O(n), but faster, because it generates a shorter stream
    * and doesn't require filtering.
    */
  def sum_2(max: Long): Long =
    evenFibs
      .takeWhile(_ < max)
      .sum

}

/*
0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610
0, 2, 8, 34, 144, 610
4(n-1) + (n)

2147483647
40000000000000000
 */